$OpenBSD$
--- dfly-fsx.c.orig	Sat Feb  1 15:24:49 2014
+++ dfly-fsx.c	Sat Feb  1 15:26:19 2014
@@ -477,7 +477,7 @@ doread(unsigned offset, unsigned size)
 void
 check_eofpage(char *s, unsigned offset, char *p, int size)
 {
-	unsigned last_page, should_be_zero;
+	u_long last_page, should_be_zero;
 
 	if (offset + size <= (file_size & ~page_mask))
 		return;
@@ -487,14 +487,14 @@ check_eofpage(char *s, unsigned offset, char *p, int s
 	 * beyond the true end of the file mapping
 	 * (as required by mmap def in 1996 posix 1003.1)
 	 */
-	last_page = ((int)p + (offset & page_mask) + size) & ~page_mask;
+	last_page = ((u_long)p + (offset & page_mask) + size) & ~page_mask;
 
 	for (should_be_zero = last_page + (file_size & page_mask);
 	     should_be_zero < last_page + page_size;
 	     should_be_zero++)
 		if (*(char *)should_be_zero) {
-			prt("Mapped %s: non-zero data past EOF (0x%llx) page offset 0x%x is 0x%04x\n",
-			    s, file_size - 1, should_be_zero & page_mask,
+			prt("Mapped %s: non-zero data past EOF (0x%llx) page offset 0x%lx is 0x%04x\n",
+			    s, (long long)file_size - 1, should_be_zero & page_mask,
 			    short_at(should_be_zero));
 			report_failure(205);
 		}
@@ -689,7 +689,7 @@ domapwrite(unsigned offset, unsigned size)
 	if (setjmp(jmpbuf) == 0) {
 	    jmpbuf_good = 1;
 	    memcpy(p + pg_offset, good_buf + offset, size);
-	    if (msync(p, map_size, 0) != 0) {
+	    if (msync(p, map_size, MS_SYNC) != 0) {
 		    prterr("domapwrite: msync");
 		    report_failure(203);
 	    }
@@ -790,7 +790,7 @@ test(void)
 {
 	unsigned long	offset;
 	unsigned long	size = maxoplen;
-	unsigned long	rv = random();
+	unsigned long	rv = arc4random();
 	unsigned long	op = rv % (3 + !lite + mapped_writes);
 
 	/* turn off the map read if necessary */
@@ -820,14 +820,14 @@ test(void)
 	 * MAPWRITE:    op = 3 or 4
 	 */
 	if (lite ? 0 : op == 3 && style == 0) /* vanilla truncate? */
-		dotruncate(random() % maxfilelen);
+		dotruncate(arc4random() % maxfilelen);
 	else {
 		if (randomoplen)
-			size = random() % (maxoplen+1);
+			size = arc4random() % (maxoplen+1);
 		if (lite ? 0 : op == 3)
 			dotruncate(size);
 		else {
-			offset = random();
+			offset = arc4random();
 			if (op == 1 || op == (lite ? 3 : 4)) {
 				offset %= maxfilelen;
 				if (offset + size > maxfilelen)
@@ -1135,7 +1135,7 @@ main(int argc, char **argv)
 	}
 	original_buf = (char *) malloc(maxfilelen);
 	for (i = 0; i < maxfilelen; i++)
-		original_buf[i] = random() % 256;
+		original_buf[i] = arc4random() % 256;
 	good_buf = (char *) malloc(maxfilelen);
 	memset(good_buf, '\0', maxfilelen);
 	temp_buf = (char *) malloc(maxoplen);
